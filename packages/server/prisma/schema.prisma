// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String     @id @default(uuid())
    username  String
    password  String
    email     String     @unique
    name      String
    age       Int
    phone     String?
    Store     Store?     @relation("store_user")
    bornAt    DateTime
    Purchases Purchase[] @relation("purchase_user")
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Store {
    id        String    @id @default(uuid())
    name      String    @unique
    admin     User      @relation("store_user", fields: [adminId], references: [id])
    products  Product[] @relation("product_store")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    adminId   String    @unique
}

model Purchase {
    purchaseId       Int               @id @default(autoincrement())
    byUser           User              @relation("purchase_user", fields: [userId], references: [id])
    PurchaseProducts PurchaseProduct[]
    userId           String

    createdAt DateTime @default(now())
}

model PurchaseProduct {
    id         Int      @id @default(autoincrement())
    purchase   Purchase @relation(fields: [purchaseId], references: [purchaseId])
    product    Product  @relation(fields: [productId], references: [productId])
    productId  Int
    purchaseId Int
    createdAt  DateTime @default(now())
}

model Product {
    productId     Int               @id @default(autoincrement())
    name          String
    price         Float
    purchaseItems PurchaseProduct[]
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    Store         Store             @relation("product_store", fields: [storeId], references: [id])
    storeId       String
}
